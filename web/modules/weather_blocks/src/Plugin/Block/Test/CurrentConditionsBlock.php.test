<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\weather_blocks\Plugin\Block\CurrentConditionsBlock;

/**
 * Tests for the CurrentConditions block.
 */
final class CurrentConditionsBlockTest extends Base
{
    /**
     * Common setup for all component tests.
     *
     * Creates a mock of a weather data service and injects it into a new
     * current conditions block object.
     */
    protected function setUp($type = null, $override = true): void
    {
        parent::setUp(CurrentConditionsBlock::class);
    }

    /**
     * Test that the block returns the expected data if we're on a point route.
     * @group unit
     * @group block
     * @group current-conditions-block
     */
    public function testBuildFromPoint(): void
    {
        $this->onLocationRoute();

        $this->weatherData
            ->method("getPlaceNearPoint")
            ->willReturn((object) ["city" => "Baskin", "state" => "Robbins"]);

        $this->weatherData
            ->method("getCurrentConditionsFromGrid")
            ->willReturn(["conditions" => "it's weathering"]);

        $expected = [
            "conditions" => "it's weathering",
            "place" => "Baskin, Robbins",
        ];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block returns the expected data if we're on a grid route.
     * @group unit
     * @group block
     * @group current-conditions-block
     */
    public function testBuildFromGrid(): void
    {
        $this->block->method("getLocation")->willReturn(
            (object) [
                "point" => false,
                "grid" => (object) ["wfo" => "bob", "x" => 32, "y" => 19],
            ],
        );

        $this->weatherData
            ->method("getPlaceFromGrid")
            ->will(
                $this->returnValueMap([
                    [
                        "bob",
                        32,
                        19,
                        false,
                        (object) ["city" => "Flavortown", "state" => "Mouth"],
                    ],
                ]),
            );

        $this->weatherData
            ->method("getCurrentConditionsFromGrid")
            ->willReturn(["conditions" => "it's weathering"]);

        $expected = [
            "conditions" => "it's weathering",
            "place" => "Flavortown, Mouth",
        ];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block returns null if we're not on a grid route.
     * @group unit
     * @group block
     * @group current-conditions-block
     */
    public function testBuildNotGridRoute(): void
    {
        $this->notOnLocationRoute();

        $actual = $this->block->build();

        $this->assertEquals(null, $actual);
    }

    /**
     * Test that the block returns an error if the fetched data is invalid.
     * @group unit
     * @group block
     * @group current-conditions-block
     */
    public function testErrorsIfDataIsInvalid(): void
    {
        $this->onLocationRoute();

        $this->weatherData
            ->method("getPlaceNearPoint")
            ->willReturn((object) ["city" => "Baskin", "state" => "Robbins"]);

        $this->weatherData
            ->method("getCurrentConditionsFromGrid")
            ->willReturn(null);

        $expected = ["error" => true];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }
}
