<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\Core\Field\FieldItemListInterface;
use Drupal\weather_blocks\Plugin\Block\DynamicSafetyInformationBlock;

/**
 * Tests for the DynamicSafetyInformation block.
 */
final class DynamicSafetyInformationBlockTest extends Base
{
    protected function setUp($type = null, $override = true): void
    {
        parent::setUp(DynamicSafetyInformationBlock::class);
    }

    protected function setupEntityAPIMocksForHazard()
    {
        // Setup fetching the actual node.
        $hazard = $this->createStub(FieldItemListInterface::class);
        $bodyField = $this->createStub(FieldItemListInterface::class);
        $titleField = $this->createStub(FieldItemListInterface::class);

        $hazard
            ->method("get")
            ->will(
                $this->returnValueMap([
                    ["body", $bodyField],
                    ["title", $titleField],
                ]),
            );

        $bodyField
            ->method("getValue")
            ->willReturn([["value" => "Extra safety info"]]);
        $titleField
            ->method("getValue")
            ->willReturn([["value" => "Safety info title"]]);

        $this->entityService
            ->method("getLatestNodeFromWeatherEvent")
            ->will(
                $this->returnValueMap([
                    ["Ternayda", "dynamic_safety_information", $hazard],
                ]),
            );
    }

    /**
     * Test that the block returns the expected data if there's additional
     * information for the requested hazard type ("Ternayda", here).
     * @group unit
     * @group block
     * @group dynamic-safety-block
     */
    public function testReturnsAHazard(): void
    {
        $this->block->setConfigurationValue("weather_event", "Ternayda");

        $this->setupEntityAPIMocksForHazard();

        $expected = [
            "body" => "Extra safety info",
            "title" => "Safety info title",
        ];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block returns an empty array if there's no additional
     * safety information for the requested hazard type ("Herkin," here).
     * @group unit
     * @group block
     * @group dynamic-safety-block
     */
    public function testReturnsNoHazard(): void
    {
        $this->block->setConfigurationValue("weather_event", "Herkin");

        $this->setupEntityAPIMocksForHazard();

        $expected = [];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Override the base test to disable it.
     * @group unit
     * @group block
     * @group dynamic-safety-block
     */
    public function testHandlesExceptions(): void
    {
        $this->assertEquals(true, true);
    }
}
