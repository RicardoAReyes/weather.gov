<?php

namespace Drupal\weather_blocks\Plugin\Block\Test\EndToEnd;

use Drupal\weather_blocks\Plugin\Block\DailyForecastBlock;

/**
 * Tests for daily forecast data structure.
 */
final class DailyForecastStructureTest extends EndToEndBase
{
    /**
     * Create the block under test.
     */
    protected function setUp($type = null): void
    {
        parent::setUp(DailyForecastBlock::class);
    }

    /**
     * Simply validate the data structure.
     * @group e2e
     */
    public function testDailyForecastDataStructure(): void
    {
        $this->onLocationRoute(33.521, -86.812);

        $schema = SchemaHelper::load("daily.json");

        $data = $this->block->build();

        $schema->in(json_decode(json_encode($data["today"][0])));
        $this->assertTrue(true);
    }

    /**
     * Ensures that we correctly format for an overnight
     * period, which is what the user should see if
     * looking between midnight and 6am of the current
     * day.
     * @group e2e
     */
    public function testDailyForecastOvernightPeriod()
    {
        // We will look at the weather at 2am point-local time
        $now = new \DateTimeImmutable();
        $now = $now->setTimezone(new \DateTimeZone("Pacific/Honolulu"));
        $now = $now->setTime(2, 0, 0);

        // Honolulu
        $this->onLocationRoute(21.305, -157.858);

        // Expected start and end
        $expectedStart = $now->setTime(0, 0, 0);
        $expectedEnd = $now->setTime(6, 0, 0);

        // Expected overall structure
        $expectedStructure = [
            "shortDayName" => $expectedStart->format("D"),
            "dayName" => $expectedStart->format("l"),
            "monthAndDay" => $expectedStart->format("M j"),
            "startTime" => $expectedStart->format("c"),
            "shortForecast" => "Scattered rain showers",
            "icon" => (object) [
                "icon" => "showers_scattered_rain.svg",
                "base" => "showers_scattered_rain",
            ],
            "temperature" => 75,
            "probabilityOfPrecipitation" => 40,
            "isDaytime" => false,
            "isOvernight" => true,
            "timeLabel" => "NOW-6AM",
        ];

        $data = $this->block->build($now);
        $actualStructure = $data["today"][0];

        // Get rid of the hourly stuff.
        // For this case, we don't care about it
        unset($actualStructure["hourlyPeriods"]);

        $this->assertEquals($expectedStructure, $actualStructure);
    }
}
