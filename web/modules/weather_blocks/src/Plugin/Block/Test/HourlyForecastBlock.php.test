<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\Core\Form\FormStateInterface;
use Drupal\weather_blocks\Plugin\Block\HourlyForecastBlock;

/**
 * Tests for the HourlyForecast block.
 */
final class HourlyForecastBlockTest extends Base
{
    /**
     * Common setup for all component tests.
     *
     * Creates a mock of a weather data service and injects it into a new current
     * conditions block object.
     */
    protected function setUp($type = null): void
    {
        parent::setUp(HourlyForecastBlock::class);
    }

    /**
     * Tests that the block returns the correct form with default configuration.
     * @group blocks
     */
    public function testDefaultForm(): void
    {
        $expected = [
            "max_items" => [
                "#type" => "textfield",
                "#title" => "Maximum items to display",
                "#default_value" => "12",
            ],
        ];

        $formState = $this->createStub(FormStateInterface::class);

        $actual = $this->block->blockForm([], $formState);

        $this->assertEquals($expected["max_items"], $actual["max_items"]);
    }

    /**
     * Test that the block returns the correct form based on prior configuration.
     * @group blocks
     */
    public function testFormUsingExistingConfig(): void
    {
        $this->block->setConfigurationValue("max_items", "6");

        $expected = [
            "max_items" => [
                "#type" => "textfield",
                "#title" => "Maximum items to display",
                "#default_value" => "6",
            ],
        ];

        $formState = $this->createStub(FormStateInterface::class);

        $actual = $this->block->blockForm([], $formState);

        $this->assertEquals($expected["max_items"], $actual["max_items"]);
    }

    /**
     * Test that the block properly persists configuration changes.
     * @group blocks
     */
    public function testBlockSubmit(): void
    {
        $expected = "9";

        $formState = $this->createStub(FormStateInterface::class);
        // I don't know why the returnValueMap function on this stub isn't working
        // as I expected, so instead put values that should be returned in the order
        // of the calls. This is super fragile, but I couldn't get the "correct" way
        // to work. I looked into use Prophecy mocks instead, but they similarly
        // just wouldn't work.
        $formState->method("getValue")->willReturn(null, $expected);

        $this->block->blockSubmit([], $formState);

        $actual = $this->block->getConfiguration()["max_items"];

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block returns default data if unconfigured.
     * @group blocks
     * @group data
     */
    public function testBuildWithDefaultConfiguration(): void
    {
        $this->onLocationRoute();

        $this->weatherData
            ->method("getHourlyForecastFromGrid")
            ->willReturn([
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
            ]);

        $expected = [
            "hours" => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12],
            "alertPeriods" => null,
        ];
        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block returns data according to saved configuration.
     * @group blocks
     * @group data
     */
    public function testBuildWithModifiedConfigured(): void
    {
        $this->onLocationRoute();
        $this->block->setConfigurationValue("max_items", "7");

        $this->weatherData
            ->method("getHourlyForecastFromGrid")
            ->willReturn([
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                9,
                10,
                11,
                12,
                13,
                14,
                15,
                16,
            ]);

        $expected = [
            "hours" => [1, 2, 3, 4, 5, 6, 7],
            "alertPeriods" => null,
        ];
        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the block returns null if we're not on a grid route.
     * @group blocks
     */
    public function testBuildNotGridRoute(): void
    {
        $this->routeMock
            ->method("getRouteName")
            ->willReturn("weather_routes.not-grid");

        $actual = $this->block->build();

        $this->assertEquals(null, $actual);
    }
}
