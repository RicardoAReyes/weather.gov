<?php

namespace Drupal\weather_blocks\Plugin\Block\Test;

use Drupal\weather_blocks\Plugin\Block\LocationSearchBlock;

/**
 * Tests for the LocationSearch block.
 */
final class LocationSearchBlockTest extends Base
{
    /**
     * Common setup for all component tests.
     *
     * Creates a new location search block.
     */
    protected function setUp($type = null, $override = true): void
    {
        parent::setUp(LocationSearchBlock::class);
    }

    /**
     * Test that the build method returns the expected results.
     * @group unit
     * @group block
     * @group location-search
     */
    public function testBuildWithPoint(): void
    {
        $this->onLocationRoute();

        $this->weatherData->method("getPlaceNearPoint")->willReturn("hiya");

        $expected = [
            "place" => "hiya",
        ];

        $actual = $this->block->build();

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Test that the build method returns the expected results.
     * @group unit
     * @group block
     * @group location-search
     */
    public function testBuildWithOnlyGrid(): void
    {
        $this->block->method("getLocation")->willReturn(
            (object) [
                "point" => false,
                "grid" => (object) [
                    "wfo" => "bob",
                    "x" => 17,
                    "y" => 93,
                ],
            ],
        );

        $this->weatherData
            ->method("getPlaceFromGrid")
            ->will($this->returnValueMap([["bob", 17, 93, false, "data"]]));

        $expected = ["place" => "data"];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }

    /**
     * Test that the build method returns NULL if there is no location.
     * @group unit
     * @group block
     * @group location-search
     */
    public function testWithNoLocation(): void
    {
        $this->notOnLocationRoute();

        $expected = [
            "place" => null,
        ];

        $actual = $this->block->build();

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Test that we handle exceptions. Overrides the base test because this one
     * needs a little extra setup.
     * @group unit
     * @group block
     */
    public function testHandlesExceptions(): void
    {
        $this->block->method("getLocation")->willReturn(
            (object) [
                "point" => false,
                "grid" => (object) [
                    "wfo" => "bob",
                    "x" => 17,
                    "y" => 93,
                ],
            ],
        );

        $this->weatherData
            ->method("getPlaceFromGrid")
            ->willThrowException(new \Exception());

        $expected = ["error" => true];

        $actual = $this->block->build();

        $this->assertEquals($expected, $actual);
    }
}
