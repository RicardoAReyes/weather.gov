<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\weather_cms\Timezones;

// This hook allows us to alter single elements of a widget, which we want to do for alt text on uploaded images
function weather_cms_field_widget_single_element_form_alter(
    array &$element,
    FormStateInterface $form_state,
    array $context,
) {
    // phpcs:ignore
    if (
        $context["widget"] instanceof
        \Drupal\image\Plugin\Field\FieldWidget\ImageWidget
    ) {
        $element["#process"][] = "weather_cms_image_field_widget_process";
    }
}

function weather_cms_image_field_widget_process($element, &$form_state, $form)
{
    if (isset($element["alt"])) {
        $element["alt"]["#description"] =
            "Alt text should provide the same information as the image, not serve as a description of the image itself. If you have included text on your image, it should be in the alt text along with whatever additional context is needed to provide the same information to users who cannot view the image."; // phpcs:ignore
    }
    return $element;
}

/**
 * Alter the list of timezones available when
 * a user is created or updated
 *
 */
function weather_cms_form_alter(
    &$form,
    FormStateInterface $form_state,
    $form_id,
) {
    if ($form_id == "user_register_form" || $form_id == "user_profile_form") {
        $form["#after_build"][] = "weather_cms_form_adjust_timezones";
    }
}

/**
 * Update the available timezones in the dropdown to only
 * include those relevant to the US and its territories,
 * and add custom label text with the correct Daylight/Standard
 * variants and UTC offsets
 */
function weather_cms_form_adjust_timezones($form, &$form_state)
{
    $timezone_ids_to_labels = Timezones::getTimezoneIdsToLabels();
    $form["timezone"]["timezone"]["#options"] = $timezone_ids_to_labels;
    return $form;
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function weather_cms_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {

    if ($entity->bundle() === 'wfo_weather_story_upload') {

        // field_derived_wfo can be manually overridden because it is not always
        // accurate. so if it is set, bail out.
        if (!empty($entity->get('field_derived_wfo')->getValue())) {
            return;
        }

        // WebURL is used to derive the WFO, so if it is not set, also bail out.
        $url = $entity->get('field_weburl')->value;
        if (empty($url)) {
            // we can't map the WFO so mark as unknown.
            $entity->set('field_derived_wfo', 'unknown');
            return;
        }

        // attempt to match against weather.gov.
        // example: http://www.weather.gov/mfl
        $weathergov = "/^https?:\/\/www.weather.gov\/([a-zA-Z]+)\/?$/i";
        if (preg_match($weathergov, $url, $matches)) {
            $derived_wfo = strtoupper($matches[1]);
            $entity->set('field_derived_wfo', $derived_wfo);
            return;
        }

        // attempt to match against a relative WFO url.
        // example: /eax/
        $relative = "/^\/([a-zA-Z]+)\/$/i";
        if (preg_match($relative, $url, $matches)) {
            $derived_wfo = strtoupper($matches[1]);
            $entity->set('field_derived_wfo', $derived_wfo);
            return;
        }

        // attempt to match against FXC.
        // example: /FXC/wxstory.php?wfo=pqr
        $fxc = "/^\/FXC\/wxstory.php\\?wfo=([a-zA-Z]+)$/i";
        if (preg_match($fxc, $url, $matches)) {
            $derived_wfo = strtoupper($matches[1]);
            $entity->set('field_derived_wfo', $derived_wfo);
            return;
        }

        // attempt to match against radar.weather.gov.
        // example: http://radar.weather.gov/lzk/
        $radar = "/^https?:\/\/radar.weather.gov\/([a-zA-Z]+)\/?/i";
        if (preg_match($radar, $url, $matches)) {
            $derived_wfo = strtoupper($matches[1]);
            $entity->set('field_derived_wfo', $derived_wfo);
            return;
        }

        // attempt to match against srh.noaa.gov. this is rare.
        // example: http://www.srh.noaa.gov/graphicast.php?site=jan&gc=9
        $srh = "/^https?:\/\/www.srh.noaa.gov\/graphicast.php\\?site=([a-zA-Z]+)/i";
        if (preg_match($srh, $url, $matches)) {
            $derived_wfo = strtoupper($matches[1]);
            $entity->set('field_derived_wfo', $derived_wfo);
            return;
        }

        // we can't map the WFO so mark as unknown.
        $entity->set('field_derived_wfo', 'unknown');
    }
}
