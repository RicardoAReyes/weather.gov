<?php

namespace Drupal\weather_data\Service\Test;

use GuzzleHttp\Psr7\Response;

/**
 * Tests for the WeatherDataService getCurrentConditionsFromGrid method.
 */
final class GetCurrentConditionsFromGridTest extends Base
{
    /**
     * Sets up the appropriate mocks for distance
     * computation and logging
     */
    public function setupDistanceLogging()
    {
        $this->selfMock->method("getObsDistanceInfo")->willReturn([
            "distance" => 42.1,
            "withinGridCell" => false,
            "obsPoint" => [
                "lon" => 42,
                "lat" => 42,
            ],
            "obsStation" => "FAKE",
            "stationIndex" => 0,
        ]);

        $this->selfMock->method("logObservationDistanceInfo")->willReturn(null);
    }

    /**
     * Sets up the HTTP mock for a happy-path of API data for an observation.
     */
    public function setupHappyPath($whichObservation)
    {
        $this->setupDistanceLogging();

        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation-stations.good.json",
                ),
            ),
        );
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                '{"geometry":{"coordinates":[[[4,3],[5,9],[3,9]]]}}',
            ),
        );
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(__DIR__ . "/test_data/" . $whichObservation),
            ),
        );

        return [
            "conditions" => [
                "long" => "Not snow",
                "short" => "Not snow",
            ],
            "feels_like" => 45,
            "humidity" => 88,
            "icon" => "snow.svg",
            "temperature" => 45,
            "timestamp" => [
                "formatted" => "Thursday 8:00 PM GMT+0000",
                "utc" => "1697140800",
            ],
            "wind" => [
                "speed" => 13,
                "direction" => (object) [
                    "angle" => 310,
                    "long" => "northwest",
                    "short" => "NW",
                ],
            ],
            "stationInfo" => [
                "name" => "NWS Test Obs Station",
                "identifier" => "KNWS",
                "lat" => 0,
                "lon" => 0,
                "elevation" => 3.3,
            ],
        ];
    }

    /**
     * Tests the happy path with no "feels like" temperature.
     */
    public function testHappyPathWithNoFeelsLike(): void
    {
        $expected = $this->setupHappyPath("observation.good-no-feelslike.json");

        $actual = $this->weatherDataService->getCurrentConditionsFromGrid(
            "wfo",
            1,
            2,
            $this->selfMock,
        );

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Tests the happy path with a heat index.
     */
    public function testHappyPathWithHeatIndex(): void
    {
        $expected = $this->setupHappyPath("observation.good-heatindex.json");
        $expected["feels_like"] = 117;

        $actual = $this->weatherDataService->getCurrentConditionsFromGrid(
            "wfo",
            1,
            2,
            $this->selfMock,
        );

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Tests the happy path with a wind chill.
     */
    public function testHappyPathWithWindChill(): void
    {
        $expected = $this->setupHappyPath("observation.good-windchill.json");
        $expected["feels_like"] = 16;

        $actual = $this->weatherDataService->getCurrentConditionsFromGrid(
            "wfo",
            1,
            2,
            $this->selfMock,
        );

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Tests the happy path with both heat index and wind chill.
     */
    public function testHappyPathWithHeatIndexAndWindChill(): void
    {
        $expected = $this->setupHappyPath("observation.good-both.json");
        $expected["feels_like"] = 194;

        $actual = $this->weatherDataService->getCurrentConditionsFromGrid(
            "wfo",
            1,
            2,
            $this->selfMock,
        );

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Tests where the first observation station is not reporting a temperature.
     */
    public function testOneObservationStationWithNoTemperature(): void
    {
        $this->setupDistanceLogging();
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation-stations.good.json",
                ),
            ),
        );

        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                '{"geometry":{"coordinates":[[[4,3],[5,9],[3,9]]]}}',
            ),
        );

        // First observation station we check has no temperature.
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation.bad-no-temperature.json",
                ),
            ),
        );

        // Next one does, so we should use that.
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation.good-both.json",
                ),
            ),
        );

        $expected = 45;

        // We expect the observation API to have
        // been called twice (index 1)
        $this->selfMock
            ->expects($this->once())
            ->method("getObsDistanceInfo")
            ->will(
                $this->returnCallback(function (
                    $refPoint,
                    $obs,
                    $wfoGeom,
                    $idx,
                ) {
                    $this->assertEquals(1, $idx);
                }),
            );

        $actual = $this->weatherDataService->getCurrentConditionsFromGrid(
            "wfo",
            1,
            2,
            $this->selfMock,
        );
        $actual = $actual["temperature"];

        $this->assertEquals($expected, $actual);

        // Expected calls: list observation stations, station 1, station 2.
        $this->assertEquals(4, count($this->httpCallStack));
    }

    /**
     * Tests where the first 3 observation stations are not reporting temperature.
     */
    public function testThreeObservationStationsWithTemperature(): void
    {
        $this->setupDistanceLogging();
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation-stations.good.json",
                ),
            ),
        );

        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                '{"geometry":{"coordinates":[[[4,3],[5,9],[3,9]]]}}',
            ),
        );

        // First three stations we check have no temperature.
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation.bad-no-temperature.json",
                ),
            ),
        );
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation.bad-no-temperature.json",
                ),
            ),
        );
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation.bad-no-temperature.json",
                ),
            ),
        );

        // Next one does, so we should use that.
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                file_get_contents(
                    __DIR__ . "/test_data/observation.good-both.json",
                ),
            ),
        );

        $expected = null;

        // For now, we do not expect calls that exceed the
        // maximum observation station call size to be logged.
        $this->selfMock->expects($this->never())->method("getObsDistanceInfo");

        $actual = $this->weatherDataService->getCurrentConditionsFromGrid(
            "wfo",
            1,
            2,
            $this->selfMock,
        );

        $this->assertEquals($expected, $actual);

        // Expected calls: list stations, station 1, station 2, station 3.
        $this->assertEquals(5, count($this->httpCallStack));
    }

    /**
     * Tests the case where the icon is null.
     */
    public function testIconIsNull(): void
    {
        $expected = $this->setupHappyPath("observation.bad-null-icon.json");
        $expected["icon"] = "nodata.svg";

        $actual = $this->weatherDataService->getCurrentConditionsFromGrid(
            "wfo",
            1,
            2,
            $this->selfMock,
        );

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Tests the case where the icon is an empty string.
     */
    public function testIconIsEmptyString(): void
    {
        $expected = $this->setupHappyPath("observation.bad-empty-icon.json");
        $expected["icon"] = "nodata.svg";

        $actual = $this->weatherDataService->getCurrentConditionsFromGrid(
            "wfo",
            1,
            2,
            $this->selfMock,
        );

        $this->assertEquals((object) $expected, (object) $actual);
    }
}
