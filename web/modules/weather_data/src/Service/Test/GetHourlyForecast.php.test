<?php

namespace Drupal\weather_data\Service\Test;

use GuzzleHttp\Psr7\Response;

/**
 * Tests for the WeatherDataService getHourlyForecast method.
 */
final class GetHourlyForecastTest extends Base
{
    /**
     * The static time used for testing.
     *
     * @var now
     */
    protected $now;

    /**
     * Common setup for all component tests.
     */
    protected function setUp(): void
    {
        parent::setUp();

        // Our test date. It's set to the date this test was first created because
        // it has to be something and I was too lazy to be creative that day. And
        // I made it noon because I was hungry. But also it's UTC, so I wouldn't
        // actually get to eat for several hours anyway. :sigh:
        $this->now = \DateTimeImmutable::createFromFormat(
            \DateTimeInterface::ISO8601_EXPANDED,
            "2023-11-16T12:00:00Z",
        );
    }

    /**
     * Sets up the happy path for network traffic.
     *
     * Given a forecast, which should be an array of hourly forecast points, sets
     * up the network mocks to return that correctly. Sets the forecast location's
     * timezone to America/Denver.
     */
    protected function setupHappyPath($forecast, $extra): void
    {
        // First call is to get the gridpoint forecast.
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                json_encode([
                    "geometry" => [
                        "coordinates" => [[[0, 1]]],
                    ],
                    "properties" => $forecast,
                ]),
            ),
        );

        // Second call is to get the hourly "extra" forecast.
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                json_encode([
                    "geometry" => [
                        "coordinates" => [[[0, 1]]],
                    ],
                    "properties" => ["periods" => $extra],
                ]),
            ),
        );

        $this->selfMock
            ->method("getPlaceFromGrid")
            ->willReturn((object) ["timezone" => "America/Denver"]);
    }

    /**
     * Test that past hours are removed.
     */
    public function testHappyPath(): void
    {
        // For this test, "now" is noon UTC, or 04:00 in the Denver time this
        // test is using.
        $forecast = (object) [
            "dewpoint" => (object) [
                "uom" => "wmoUnit:degC",
                "values" => [
                    (object) [
                        // This one spans time before "now" and after any other
                        // property.
                        "validTime" => "2023-11-16T01:00:00-08:00/PT6H",
                        "value" => 19,
                    ],
                ],
            ],
            "probabilityOfPrecipitation" => (object) [
                "uom" => "wmoUnit:percent",
                "values" => [
                    (object) [
                        // This one is not aligned to an hour, but it should be
                        // when it gets processed back to us.
                        "validTime" => "2023-11-16T03:30:00-08:00/PT2H",
                        "value" => 4,
                    ],
                    (object) [
                        "validTime" => "2023-11-16T05:00:00-08:00/PT4H",
                        "value" => 34,
                    ],
                ],
            ],
            "relativeHumidity" => (object) [
                "uom" => "wmoUnit:percent",
                "values" => [
                    (object) [
                        "validTime" => "2023-11-16T03:30:00-08:00/PT1H",
                        "value" => 4,
                    ],
                    (object) [
                        "validTime" => "2023-11-16T04:00:00-08:00/PT1H",
                        "value" => 34,
                    ],
                    (object) [
                        "validTime" => "2023-11-16T05:00:00-08:00/PT8H",
                        "value" => 0,
                    ],
                ],
            ],
            "temperature" => (object) [
                "uom" => "wmoUnit:degC",
                "values" => [
                    (object) [
                        // This one is the shortest period, starting one hour
                        // before "now" and ending two hours after it. As a
                        // result, our output should be just two periods â€“ the
                        // two after now.
                        "validTime" => "2023-11-16T03:00:00-08:00/PT3H",
                        "value" => 97,
                    ],
                ],
            ],
            "windDirection" => (object) [
                "uom" => "wmoUnit:degree_(angle)",
                "values" => [
                    (object) [
                        "validTime" => "2023-11-16T03:00:00-08:00/PT3H",
                        "value" => 97,
                    ],
                ],
            ],
            "windSpeed" => (object) [
                "uom" => "wmoUnit:km_h-1",
                "values" => [
                    (object) [
                        "validTime" => "2023-11-16T03:00:00-08:00/PT3H",
                        "value" => 3,
                    ],
                ],
            ],
        ];

        $extra = [
            (object) [
                // This start time should align with the second period in the
                // gridpoint forecast.
                "startTime" => "2023-11-16T05:00:00-08:00",
                "shortForecast" => "It's gonna rain sideways",
            ],
        ];

        $this->setupHappyPath($forecast, $extra);

        $expected = [
            [
                "conditions" => "",
                "dewpoint" => 66,
                "probabilityOfPrecipitation" => 4,
                "relativeHumidity" => 34,
                "time" => "5 AM",
                "timestamp" => "2023-11-16T04:00:00-08:00",
                "temperature" => 207,
                "windDirection" => (object) [
                    "angle" => 97,
                    "long" => "east",
                    "short" => "E",
                ],
                "windSpeed" => 2,
            ],
            [
                "conditions" => "It's gonna rain sideways",
                "dewpoint" => 66,
                "probabilityOfPrecipitation" => 34,
                "relativeHumidity" => 0,
                "time" => "6 AM",
                "timestamp" => "2023-11-16T05:00:00-08:00",
                "temperature" => 207,
                "windDirection" => (object) [
                    "angle" => 97,
                    "long" => "east",
                    "short" => "E",
                ],
                "windSpeed" => 2,
            ],
        ];
        $actual = $this->weatherDataService->getHourlyForecastFromGrid(
            "wfo",
            "x",
            "y",
            $this->now,
            $this->selfMock,
        );
        $this->assertEquals((object) $expected, (object) $actual);
    }

    // /**
    //  * Test that empty or null icons are handled properly.
    //  */
    // public function testEmptyAndNullIcon(): void
    // {
    //     $response = [
    //         [
    //             "startTime" => "2023-11-16T12:00:00-07:00",
    //             "temperature" => 1,
    //             "shortForecast" => "thunderBOLT",
    //             "windSpeed" => "26 mph",
    //             "windDirection" => "W",
    //             "probabilityOfPrecipitation" => [
    //                 "value" => 11,
    //             ],
    //             "relativeHumidity" => [
    //                 "value" => 12,
    //             ],
    //             "dewpoint" => [
    //                 "unitCode" => "wmoUnit:degC",
    //                 "value" => -9.4444444444444446,
    //             ],
    //             "icon" => "",
    //         ],
    //         [
    //             "startTime" => "2023-11-16T13:00:00-07:00",
    //             "temperature" => 2,
    //             "shortForecast" => "lightning",
    //             "windSpeed" => "26 mph",
    //             "windDirection" => "W",
    //             "probabilityOfPrecipitation" => [
    //                 "value" => 22,
    //             ],
    //             "relativeHumidity" => [
    //                 "value" => 12,
    //             ],
    //             "dewpoint" => [
    //                 "unitCode" => "wmoUnit:degC",
    //                 "value" => -9.4444444444444446,
    //             ],
    //             "icon" => null,
    //         ],
    //     ];
    //     $this->setupHappyPath($response);

    //     $expected = [
    //         [
    //             // Conditions should be sentence-cased.
    //             "conditions" => "Thunderbolt",
    //             "icon" => "nodata.svg",
    //             "iconBasename" => "nodata",
    //             "probabilityOfPrecipitation" => 11,
    //             "time" => "12 PM",
    //             "timestamp" => "2023-11-16T12:00:00-07:00",
    //             "temperature" => 1,
    //             "relativeHumidity" => 12,
    //             "dewpoint" => 15.0,
    //             "windSpeed" => "26 mph",
    //             "windDirection" => "W",
    //         ],
    //         [
    //             "conditions" => "Lightning",
    //             "icon" => "nodata.svg",
    //             "iconBasename" => "nodata",
    //             "probabilityOfPrecipitation" => 22,
    //             "time" => "1 PM",
    //             "timestamp" => "2023-11-16T13:00:00-07:00",
    //             "temperature" => 2,
    //             "relativeHumidity" => 12,
    //             "dewpoint" => 15.0,
    //             "windSpeed" => "26 mph",
    //             "windDirection" => "W",
    //         ],
    //     ];

    //     $actual = $this->weatherDataService->getHourlyForecastFromGrid(
    //         "wfo",
    //         "x",
    //         "y",
    //         $this->now,
    //         $this->selfMock,
    //     );

    //     $this->assertEquals((object) $expected, (object) $actual);
    // }

    /**
     * Test that if we don't pass a "now", everything still works.
     */
    public function testDefaultNow(): void
    {
        // The past. Any time in the past will do.
        $forecast = (object) [
            "dewpoint" => (object) [
                "uom" => "wmoUnit:degC",
                "values" => [
                    (object) [
                        "validTime" => "1994-01-01T03:00:00-08:00/PT10H",
                        "value" => 19,
                    ],
                ],
            ],
            "probabilityOfPrecipitation" => (object) [
                "uom" => "wmoUnit:percent",
                "values" => [
                    (object) [
                        "validTime" => "1994-01-01T03:00:00-08:00/PT10H",
                        "value" => 4,
                    ],
                ],
            ],
            "relativeHumidity" => (object) [
                "uom" => "wmoUnit:percent",
                "values" => [
                    (object) [
                        "validTime" => "1994-01-01T03:00:00-08:00/PT10H",
                        "value" => 4,
                    ],
                ],
            ],
            "temperature" => (object) [
                "uom" => "wmoUnit:degC",
                "values" => [
                    (object) [
                        "validTime" => "1994-01-01T03:00:00-08:00/PT10H",
                        "value" => 97,
                    ],
                ],
            ],
            "windDirection" => (object) [
                "uom" => "wmoUnit:degree_(angle)",
                "values" => [
                    (object) [
                        "validTime" => "1994-01-01T03:00:00-08:00/PT10H",
                        "value" => 97,
                    ],
                ],
            ],
            "windSpeed" => (object) [
                "uom" => "wmoUnit:km_h-1",
                "values" => [
                    (object) [
                        "validTime" => "1994-01-01T03:00:00-08:00/PT10H",
                        "value" => 3,
                    ],
                ],
            ],
        ];

        $extra = [
            (object) [
                // This start time should align with the second period in the
                // gridpoint forecast.
                "startTime" => "1994-11-16T05:00:00-08:00",
                "shortForecast" => "Not a forecast. More of a pastcast.",
            ],
        ];

        $this->setupHappyPath($forecast, $extra);

        $expected = [];
        $actual = $this->weatherDataService->getHourlyForecastFromGrid(
            "wfo",
            "x",
            "y",
            false,
            $this->selfMock,
        );
        $this->assertEquals((object) $expected, (object) $actual);
    }
}
