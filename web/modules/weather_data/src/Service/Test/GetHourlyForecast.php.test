<?php

namespace Drupal\weather_data\Service\Test;

use GuzzleHttp\Psr7\Response;

/**
 * Tests for the WeatherDataService getHourlyForecast method.
 */
final class GetHourlyForecastTest extends Base
{
    /**
     * The static time used for testing.
     *
     * @var now
     */
    protected $now;

    /**
     * Common setup for all component tests.
     */
    protected function setUp(): void
    {
        parent::setUp();

        // Our test date. It's set to the date this test was first created because
        // it has to be something and I was too lazy to be creative that day. And
        // I made it noon because I was hungry. But also it's UTC, so I wouldn't
        // actually get to eat for several hours anyway. :sigh:
        $this->now = \DateTimeImmutable::createFromFormat(
            \DateTimeInterface::ISO8601_EXPANDED,
            "2023-11-16T12:00:00Z",
        );
    }

    /**
     * Sets up the happy path for network traffic.
     *
     * Given a forecast, which should be an array of hourly forecast points, sets
     * up the network mocks to return that correctly. Sets the forecast location's
     * timezone to America/Denver.
     */
    protected function setupHappyPath($forecast): void
    {
        // First call is to get the hourly forecast, so return that.
        $this->httpClientMock->append(
            new Response(
                200,
                ["Content-type" => "application/geo+json"],
                json_encode([
                    "geometry" => [
                        "coordinates" => [[[0, 1]]],
                    ],
                    "properties" => [
                        "periods" => $forecast,
                    ],
                ]),
            ),
        );

        $this->selfMock
            ->method("getPlaceFromGrid")
            ->willReturn((object) ["timezone" => "America/Denver"]);
    }

    /**
     * Test that past hours are removed.
     */
    public function testRemovingPastHourlyPeriods(): void
    {
        $response = [
            [
                // One minute before noon UTC, but not using UTC or America/Denver tz.
                "startTime" => "2023-11-16T03:59:59-08:00",
                "temperature" => 1,
                "shortForecast" => "blah",
                "probabilityOfPrecipitation" => [
                    "value" => 11,
                ],
                "icon" => "https://blah/day/rain,30?size=small",
            ],
            [
                // One hour before noon UTC, and in America/Denver tz.
                "startTime" => "2023-11-16T03:00:00-07:00",
                "temperature" => 2,
                "shortForecast" => "bleh",
                "probabilityOfPrecipitation" => [
                    "value" => 22,
                ],
                "icon" => "https://blah/day/rain,30?size=small",
            ],
            [
                // One hour before noon UTC.
                "startTime" => "2023-11-16T11:00:00Z",
                "temperature" => 3,
                "shortForecast" => "bluh",
                "probabilityOfPrecipitation" => [
                    "value" => 33,
                ],
                "icon" => "https://blah/day/rain,30?size=small",
            ],
        ];
        $this->setupHappyPath($response);

        $expected = [];
        $actual = $this->weatherDataService->getHourlyForecastFromGrid(
            "wfo",
            "x",
            "y",
            $this->now,
            $this->selfMock,
        );
        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Test that empty or null icons are handled properly.
     */
    public function testEmptyAndNullIcon(): void
    {
        $response = [
            [
                "startTime" => "2023-11-16T12:00:00-07:00",
                "temperature" => 1,
                "shortForecast" => "thunderBOLT",
                "windSpeed" => "26 mph",
                "windDirection" => "W",
                "probabilityOfPrecipitation" => [
                    "value" => 11,
                ],
                "relativeHumidity" => [
                    "value" => 12,
                ],
                "dewpoint" => [
                    "unitCode" => "wmoUnit:degC",
                    "value" => -9.4444444444444446,
                ],
                "icon" => "",
            ],
            [
                "startTime" => "2023-11-16T13:00:00-07:00",
                "temperature" => 2,
                "shortForecast" => "lightning",
                "windSpeed" => "26 mph",
                "windDirection" => "W",
                "probabilityOfPrecipitation" => [
                    "value" => 22,
                ],
                "relativeHumidity" => [
                    "value" => 12,
                ],
                "dewpoint" => [
                    "unitCode" => "wmoUnit:degC",
                    "value" => -9.4444444444444446,
                ],
                "icon" => null,
            ],
        ];
        $this->setupHappyPath($response);

        $expected = [
            [
                // Conditions should be sentence-cased.
                "conditions" => "Thunderbolt",
                "icon" => (object) ["icon" => null, "base" => null],
                "probabilityOfPrecipitation" => 11,
                "time" => "12 PM",
                "timestamp" => "2023-11-16T12:00:00-07:00",
                "temperature" => 1,
                "relativeHumidity" => 12,
                "dewpoint" => 15.0,
                "windSpeed" => "26 mph",
                "windDirection" => "W",
            ],
            [
                "conditions" => "Lightning",
                "icon" => (object) ["icon" => null, "base" => null],
                "probabilityOfPrecipitation" => 22,
                "time" => "1 PM",
                "timestamp" => "2023-11-16T13:00:00-07:00",
                "temperature" => 2,
                "relativeHumidity" => 12,
                "dewpoint" => 15.0,
                "windSpeed" => "26 mph",
                "windDirection" => "W",
            ],
        ];

        $actual = $this->weatherDataService->getHourlyForecastFromGrid(
            "wfo",
            "x",
            "y",
            $this->now,
            $this->selfMock,
        );

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Test the happiest of happy paths.
     */
    public function testHappyPath(): void
    {
        $response = [
            [
                // One minute before noon UTC. This should be filtered out.
                "startTime" => "2023-11-16T03:59:59-08:00",
                "temperature" => 1,
                "shortForecast" => "Very Very",
                "windSpeed" => "26 mph",
                "windDirection" => "W",
                "probabilityOfPrecipitation" => [
                    "value" => 11,
                ],
                "relativeHumidity" => [
                    "value" => 12,
                ],
                "dewpoint" => [
                    "unitCode" => "wmoUnit:degC",
                    "value" => -9.4444444444444446,
                ],
                "icon" => "https://blah/day/rain,30?size=small",
            ],
            [
                "startTime" => "2023-11-16T12:00:00-07:00",
                "temperature" => 2,
                "shortForecast" => "FRIGHTENING",
                "windSpeed" => "26 mph",
                "windDirection" => "W",
                "probabilityOfPrecipitation" => [
                    "value" => 22,
                ],
                "relativeHumidity" => [
                    "value" => 12,
                ],
                "dewpoint" => [
                    "unitCode" => "wmoUnit:degC",
                    "value" => -9.4444444444444446,
                ],
                "icon" => "https://blah/night/rain,30?size=medium",
            ],
            [
                "startTime" => "2023-11-16T13:00:00-07:00",
                "temperature" => 3,
                "shortForecast" => "Mama mia!",
                "windSpeed" => "26 mph",
                "windDirection" => "W",
                "probabilityOfPrecipitation" => [
                    "value" => 33,
                ],
                "relativeHumidity" => [
                    "value" => 12,
                ],
                "dewpoint" => [
                    "unitCode" => "wmoUnit:degC",
                    "value" => -9.4444444444444446,
                ],
                "icon" => "https://blah/day/snow,40?size=huge",
            ],
        ];
        $this->setupHappyPath($response);

        $expected = [
            [
                "conditions" => "Frightening",
                "icon" => (object) [
                    "icon" => "rain.svg",
                    "base" => "rain",
                ],
                "probabilityOfPrecipitation" => 22,
                "time" => "12 PM",
                "timestamp" => "2023-11-16T12:00:00-07:00",
                "temperature" => 2,
                "relativeHumidity" => 12,
                "dewpoint" => 15.0,
                "windSpeed" => "26 mph",
                "windDirection" => "W",
            ],
            [
                "conditions" => "Mama mia!",
                "icon" => (object) ["icon" => "snow.svg", "base" => "snow"],
                "probabilityOfPrecipitation" => 33,
                "time" => "1 PM",
                "timestamp" => "2023-11-16T13:00:00-07:00",
                "temperature" => 3,
                "relativeHumidity" => 12,
                "dewpoint" => 15.0,
                "windSpeed" => "26 mph",
                "windDirection" => "W",
            ],
        ];

        $actual = $this->weatherDataService->getHourlyForecastFromGrid(
            "wfo",
            "x",
            "y",
            $this->now,
            $this->selfMock,
        );

        $this->assertEquals((object) $expected, (object) $actual);
    }

    /**
     * Test that if we don't pass a "now", everything still works.
     */
    public function testDefaultNow(): void
    {
        $response = [
            [
                // The past. Any time in the past will do.
                "startTime" => "1994-01-01T03:59:59-08:00",
                "temperature" => 1,
                "probabilityOfPrecipitation" => [
                    "value" => 11,
                ],
                "windSpeed" => "26 mph",
                "windDirection" => "W",
                "dewpoint" => [
                    "value" => -9.4444444444444446,
                ],
                "icon" => "https://blah/day/rain,30?size=small",
            ],
        ];
        $this->setupHappyPath($response);

        $expected = [];
        $actual = $this->weatherDataService->getHourlyForecastFromGrid(
            "wfo",
            "x",
            "y",
            false,
            $this->selfMock,
        );
        $this->assertEquals((object) $expected, (object) $actual);
    }
}
