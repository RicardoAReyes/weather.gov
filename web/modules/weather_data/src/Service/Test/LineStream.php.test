<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\weather_data\Service\LineStream;
use PHPUnit\Framework\TestCase;

final class LineStreamTest extends TestCase
{
    /**
     * @group unit
     * @group linestream
     */
    public function testAtEndBasic(): void
    {
        $source = "Line 1\nLine2\nLine3";
        $stream = new LineStream($source);

        $this->assertEquals(false, $stream->atEnd());

        $stream->position = 3;

        $this->assertEquals(true, $stream->atEnd());
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testAtEndEmpty(): void
    {
        $source = "";
        $stream = new LineStream($source);

        $this->assertEquals(true, $stream->atEnd());
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testPeekBasic(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 1;

        $expected = ["Line2"];
        $expectedPosition = 1;
        $actual = $stream->peek();

        $this->assertEquals($expected, $actual);
        $this->assertEquals($expectedPosition, $stream->position);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testPeekEmpty(): void
    {
        $source = "";
        $stream = new LineStream($source);
        $expected = null;
        $actual = $stream->peek();

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testPeekFromEnd(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 3;

        $expected = null;
        $actual = $stream->peek();

        $this->assertEquals($expected, $actual);
        $this->assertEquals(3, $stream->position);
        $this->assertTrue($stream->atEnd());
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testPeekBeyond(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 1;

        $expected = ["Line2", "Line3"];
        $expectedPosition = 1;
        // Peek beyond the end of the stream
        $actual = $stream->peek(7);

        $this->assertEquals($expected, $actual);
        $this->assertEquals($expectedPosition, $stream->position);
        $this->assertFalse($stream->atEnd());
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testNextBasic(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 1;

        $expected = ["Line2"];
        $expectedPosition = 2;
        $actual = $stream->next();

        $this->assertEquals($expected, $actual);
        $this->assertEquals($expectedPosition, $stream->position);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testNextEmpty(): void
    {
        $source = "";
        $stream = new LineStream($source);
        $expected = null;
        $actual = $stream->next();

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testNextFromEnd(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 3;

        $expected = null;
        $actual = $stream->next();

        $this->assertTrue($stream->atEnd());
        $this->assertEquals($expected, $actual);
        $this->assertEquals(3, $stream->position);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testNextBeyond(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 1;

        $expected = ["Line2", "Line3"];
        $expectedPosition = 3;
        // Peek beyond the end of the stream
        $actual = $stream->next(7);

        $this->assertEquals($expected, $actual);
        $this->assertEquals($expectedPosition, $stream->position);
        $this->assertTrue($stream->atEnd());
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testNextLineBasic(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $expected = "Line1";
        $actual = $stream->nextLine();

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testPeekBackBasic(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 1;

        $expected = ["Line1"];
        $actual = $stream->peekBack();
        $expectedPosition = 1;
        $actualPosition = $stream->position;

        $this->assertEquals($expected, $actual);
        $this->assertEquals($expectedPosition, $actualPosition);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testPeekBackBeyond(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 2;

        $expected = ["Line1", "Line2"];
        // Peek back beyond the beginning
        $actual = $stream->peekBack(7);
        $expectedPosition = 2;
        $actualPosition = $stream->position;

        $this->assertEquals($expected, $actual);
        $this->assertEquals($expectedPosition, $actualPosition);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testBackBasic(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 1;

        $expected = ["Line1"];
        $actual = $stream->back();

        $expectedPos = 0;
        $actualPos = $stream->position;

        $this->assertEquals($expected, $actual);
        $this->assertEquals($expectedPos, $actualPos);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testBackEmpty(): void
    {
        $source = "";
        $stream = new LineStream($source);

        $expected = null;
        $actual = $stream->back();

        $this->assertEquals($expected, $actual);
        $this->assertEquals(0, $stream->position);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testBackFromBeginning(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);

        $expected = null;
        $actual = $stream->back();

        $this->assertEquals($expected, $actual);
        $this->assertEquals(0, $stream->position);
    }

    /**
     * @group unit
     * @group linstream
     */
    public function testBackFromEnd(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 3;
        $this->assertTrue($stream->atEnd());

        $expected = ["Line3"];
        $actual = $stream->back();

        $this->assertFalse($stream->atEnd());
        $this->assertEquals($expected, $actual);
        $this->assertEquals(2, $stream->position);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testBackBeyond(): void
    {
        $source = "Line1\nLine2\nLine3";
        $stream = new LineStream($source);
        $stream->position = 2;

        $expected = ["Line1", "Line2"];
        // Snatch beyond the beginning of the stream
        $actual = $stream->back(7);

        $this->assertEquals($expected, $actual);
        $this->assertEquals(0, $stream->position);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testUpToMatchBasic(): void
    {
        $source = "First line\nSecond line\n...Third line...\nFourth line";
        $stream = new LineStream($source);
        $regex = "/^[\.]{3}[^\.]+[\.]{3}$/";

        $expected = ["First line", "Second line"];
        $actual = $stream->upToMatch($regex);

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group linestream
     */
    public function testUpToAndIncludingMatchBasic(): void
    {
        $source = "First line\nSecond line\n...Third line...\nFourth line";
        $stream = new LineStream($source);
        $regex = "/^[\.]{3}[^\.]+[\.]{3}$/";

        $expected = ["First line", "Second line", "...Third line..."];
        $actual = $stream->upToAndIncludingMatch($regex);

        $this->assertEquals($expected, $actual);
    }
}
