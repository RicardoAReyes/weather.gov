<?php

namespace Drupal\weather_data\Service\Test;

use Drupal\weather_data\Service\UnitConversion;
use PHPUnit\Framework\TestCase;

final class LengthUnitConversionTest extends TestCase
{
    /**
     * @group unit
     * @group units-utility
     */
    public function testNullLength(): void
    {
        $expected = null;
        $actual = UnitConversion::getLengthScalar((object) ["value" => null]);

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group units-utility
     */
    public function testMetersToFeet(): void
    {
        $expected = 106;
        $actual = UnitConversion::getLengthScalar(
            (object) ["value" => 32.355, "unitCode" => "wmoUnit:m"],
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group units-utility
     */
    public function testMetersToMeters(): void
    {
        $expected = 32;
        $actual = UnitConversion::getLengthScalar(
            (object) ["value" => 32.355, "unitCode" => "wmoUnit:m"],
            false,
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group units-utility
     */
    public function testFeetToFeet(): void
    {
        $expected = 106;
        $actual = UnitConversion::getLengthScalar(
            (object) ["value" => 106, "unitCode" => "wmoUnit:ft"],
        );

        $this->assertEquals($expected, $actual);
    }

    /**
     * @group unit
     * @group units-utility
     */
    public function testFeetToMeters(): void
    {
        $expected = 32;
        $actual = UnitConversion::getLengthScalar(
            (object) ["value" => 106, "unitCode" => "wmoUnit:ft"],
            false,
        );

        $this->assertEquals($expected, $actual);
    }
}
