<?php

use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

function weather_data_template_preprocess_default_variables_alter(&$variables)
{
    // First, get our route information.
    $container = \Drupal::getContainer();
    $route = $container->get("current_route_match");

    // By default, assume we are not on a page with lat/lon information.
    $lat = null;
    $lon = null;

    $routeName = $route->getRouteName();

    // If we're on a place route, we'll need to query to get the lat/lon. We
    // are assured that a lat/lon will exist because the route controller will
    // throw a 404 if there's not. It's a duplicate query, but I couldn't figure
    // out how to pass the lat/lon from the route controller down to here.
    if ($routeName == "weather_routes.place") {
        $state = $route->getParameter("state");
        $place = $route->getParameter("place");

        // We need to unescape spaces and slashes from the URL parameter.
        $place = str_replace("_", " ", $place);
        $place = str_replace(",", "/", $place);

        $db = $container->get("database");
        $location = $db
            ->query(
                "SELECT
                ST_X(point) AS lon,
                ST_Y(point) AS lat
            FROM weathergov_geo_places
            WHERE
                state LIKE :state
                AND
                name LIKE :place",
                [":state" => $state, ":place" => $place],
            )
            ->fetch();

        $lat = $location->lat;
        $lon = $location->lon;
    }

    // If we're on a point route, we can take lat/lon directly from the URL.
    if ($routeName == "weather_routes.point") {
        $lat = $route->getParameter("lat");
        $lon = $route->getParameter("lon");
    }

    // If we have lat and lon, then we can fetch data from the interop layer and
    // make it available to Twig.
    if ($lat && $lon) {
        $weatherMetadata["point"] = ["lat" => $lat, "lon" => $lon];

        // this is required since we no longer can interpret api.weather.gov lat/lon directly
        // note: the url must have a scheme (https:// or http://) and no trailing slash
        $baseUrl = getEnv("API_INTEROP_URL");

        $fetch = $container->get("http_client");
        try {
            $data = $fetch->get("$baseUrl/point/$lat/$lon")->getBody();
        } catch (Throwable $e) {
            $data = '{"error":true}';
        }

        $variables["point"] = json_decode($data);
    }
}
