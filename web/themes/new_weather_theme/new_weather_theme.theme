<?php

/**
 * @file
 * Functions to support theming.
 */

/**
 * Implements hook_preprocess_image_widget().
 */
function new_weather_theme_preprocess_image_widget(array &$variables)
{
    $data = &$variables["data"];

    // This prevents image widget templates from rendering preview container HTML
    // to users that do not have permission to access these previews.
    // @todo revisit in https://drupal.org/node/953034
    // @todo revisit in https://drupal.org/node/3114318
    if (
        isset($data["preview"]["#access"]) &&
        $data["preview"]["#access"] === false
    ) {
        unset($data["preview"]);
    }
}

/**
 * Preprocess WFO Information Nodes
 *
 * Use this function to make various field
 * values more accessible to the underlying
 * customized templates
 */
function new_weather_theme_preprocess_node__wfo_info(&$variables, $theme)
{
    $node = $variables["node"];

    // Process the field_wfo information
    $field_wfo = $variables["content"]["field_wfo"];
    $wfo_entity = $field_wfo[0]["#entity"];
    $wfo_code = $wfo_entity->field_wfo_code->value;
    $wfo_name = $wfo_entity->name->value;
    $wfo_id = $wfo_entity->id();
    $variables["wfo"] = [
        "code" => $wfo_code,
        "name" => $wfo_name,
        "id" => $wfo_id,
    ];

    // Get counties
    $container = \Drupal::getContainer();
    $dataLayer = $container->get("weather_data_layer");

    // Normally we'd use a GROUP BY here, but in ANSI standard mode, MySQL throws
    // an error if you GROUP BY in a query that selects any columns other than
    // the grouping column or aggregate functions. ANSI standard mode is default
    // in MySQL now, and rather than changing its behavior, we'll do the
    // grouping ourselves.
    $counties = $dataLayer->databaseFetchAll(
        "SELECT
            state,stateName,countyName
        FROM weathergov_geo_counties
        WHERE
            cwas LIKE :wfo
        ORDER BY countyName
        ",
        [":wfo" => "|$wfo_code|"],
    );

    // Get the list of unique states. We'll use this to group the counties.
    $states = array_values(
        array_unique(
            array_map(function ($county) {
                return $county->state;
            }, $counties),
        ),
    );

    // Now turn that list of state names into a list of counties. The county
    // objects contain the state information, so we don't need to keep the
    // state names from the $states array.
    $states = array_map(function ($state) use ($counties) {
        return array_values(
            array_filter($counties, function ($county) use ($state) {
                return $county->state === $state;
            }),
        );
    }, $states);

    // Smoosh them all back together.
    $counties = array_merge(...$states);

    // And turn them into a big string.
    $counties = array_map(function ($county) {
        return $county->countyName . ", " . $county->stateName;
    }, $counties);
    $variables["counties"] = implode("; ", $counties);

    // Process field_address information
    $field_address = $variables["content"]["field_address"];
    $address_object = $field_address[0];
    if ($address_object) {
        $address_keys = array_filter(array_keys($address_object), function (
            $key,
        ) {
            return !str_starts_with($key, "#");
        });
        $address_vars = [];
        foreach ($address_keys as $key) {
            $value = $address_object[$key]["#value"];
            $address_vars[$key] = $value;
        }
        $variables["address"] = $address_vars;
    }

    // Check if there is email
    $field_email = $variables["content"]["field_wfo_email"];
    $email_object = $field_email[0];
    if ($email_object) {
        $variables["email"] = true;
    }

    // Process all url fields
    $url_field_names = array_filter(array_keys($node->getFields()), function (
        $key,
    ) {
        return str_ends_with($key, "_url");
    });

    $variables["external_links"] = [];
    foreach ($url_field_names as $name) {
        $short_name = str_replace("field_", "", $name);
        $value = $node->$name->value;
        $variables["external_links"][$short_name] = $value;
    }

    // Process phone number field
    $phone_value = $node->field_phone_number_opt->first()?->getValue();
    $variables["phone"] = $phone_value;
}

function new_weather_theme_preprocess_image(&$variables)
{
    // Strip the width and height attributes from the image that is going to be
    // rendered on the page, so we can control the size in CSS instead.
    //
    // This function may need to be more narrowly targeted to only modify
    // specific images, but for now, just do 'em all.
    foreach (["width", "height"] as $key) {
        unset($variables["attributes"][$key]);
    }
}

/**
 * Allows us the ability to override image formatter templates
 * on a by-node type basis.
 * Taken from (https://drupal.stackexchange.com/questions/137652/override-image-formatter-html-twig)
 */
function new_weather_theme_theme_suggestions_image_formatter_alter(
    array &$suggestions,
    array $variables,
) {
    $entity = $variables["item"]->getEntity();
    $field_name = $variables["item"]->getParent()->getName();
    $suggestions[] =
        "image_formatter__" .
        $entity->getEntityTypeId() .
        "__" .
        $entity->bundle() .
        "__" .
        $field_name;
}

function new_weather_theme_theme_suggestions_page_alter(&$suggestions)
{
    if (
        !is_null(
            Drupal::requestStack()
                ->getCurrentRequest()
                ->attributes->get("exception"),
        )
    ) {
        $status_code = Drupal::requestStack()
            ->getCurrentRequest()
            ->attributes->get("exception")
            ->getStatusCode();
        switch ($status_code) {
            case 404:
                $suggestions[] = "page__" . (string) $status_code;
                break;
            default:
                break;
        }
    }
}
